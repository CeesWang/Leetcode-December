class Solution {
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        int ans = 0;
        for (int i = 0; i < A.length; ++i) {
            for (int j = 0; j < B.length; ++j) {
                for (int k = 0; k < C.length; ++k) {
                    for (int l = 0; l < D.length; ++l) {
                        if (A[i] + B[j] + C[k] + D[l] == 0) {
                            ans++;
                        } 
                    }
                }
            }
        }
        return ans;
    }
}

class Solution {
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        int ans = 0;
        HashMap<Integer,Integer> map = new HashMap<>();
        for (int i = 0; i < D.length; ++i) {
            map.put(D[i], map.getOrDefault(D[i], 0) + 1);
        }
        
        for (int i = 0; i < A.length; ++i) {
            for (int j = 0; j < B.length; ++j) {
                for (int k = 0; k < C.length; ++k) {
                    int sum = A[i] + B[j] + C[k];
                    if (map.containsKey(0 - sum)) ans += map.get(0 - sum);
                }
            }
        }
        return ans;
    }
}

class Solution {
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        int ans = 0;
        HashMap<Integer,Integer> map = new HashMap<>();
        for (int i = 0; i < A.length; ++i) {
            for (int j = 0; j < B.length; ++j) {
                int sum = A[i] + B[j];
                map.put(sum, map.getOrDefault(sum, 0) + 1);
            }
        }
        for (int k = 0; k < C.length; ++k) {
            for (int l = 0; l < D.length; ++l) {
                int sum = C[k] + D[l];
                if (map.containsKey(0 - sum)) {
                    ans += map.get(0 - sum);
                }
            }
        }
        return ans;
    }
}
