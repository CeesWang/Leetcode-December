class Solution {
    public int smallestRangeII(int[] A, int K) {
        int diff = Integer.MAX_VALUE;
        return diff;
    }
}

class Solution {
    public int smallestRangeII(int[] A, int K) {
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        double sum = 0;
        for (int num : A) {
            sum += num;
        }
        sum = Math.ceil(sum / A.length);
        for (int i = 0; i < A.length; ++i) {
            if (A[i] < sum) {
                A[i] += K; 
            }
            else {
                A[i] -= K;
            }
            min = Math.min(min, A[i]);
            max = Math.max(max, A[i]);
            
        }
        return max - min;
    }
}

// 1,3,6   [3]    avg = 10 / 3 = 3.333
//  
// 7 7 8    7.33333
// 12 12 13  

class Solution {
    public int smallestRangeII(int[] A, int K) {
        Arrays.sort(A);
        int len = A.length;
        int ans = A[len -1] - A[0];
        int begin = A[0] + K;
        int end = A[len - 1] - K;
        for (int i = 0; i < len - 1; ++i) {
            int max = Math.max(end, A[i] + K);
            int min = Math.min(begin, A[i + 1] - K);
            ans = Math.min(ans, max - min);
        }
        return ans;
    }
}
