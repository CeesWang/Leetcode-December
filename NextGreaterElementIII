class Solution {
    public int nextGreaterElement(int n) {
        char [] numArr = Integer.toString(n).toCharArray();
        int [] ans = new int [] {-1};
        backtrack(numArr, 0, ans, n);
        return ans[0];
    }
    
    public void backtrack(char [] numArr, int idx, int [] ans, int n) {
        if (idx == numArr.length && isGreaterElement(numArr, n)) {
            int num = Integer.parseInt(new String(numArr));
            ans[0] = ans[0] != -1 ? Math.min(ans[0], num) : num; 
        }
        for (int i = idx; i < numArr.length; ++i) {
            swap(numArr, i, idx);
            backtrack(numArr, idx + 1, ans, n);
            swap(numArr, i, idx);
        }
        
    }
    
    public void swap (char [] numArr, int i, int j) {
        char temp = numArr[i];
        numArr[i] = numArr[j];
        numArr[j] = temp;
    }
    
    public boolean isGreaterElement(char [] numArr, int n) {
        long num = Long.parseLong(new String(numArr));
        return num <= Integer.MAX_VALUE && num > n; 
    }
        
    
}
