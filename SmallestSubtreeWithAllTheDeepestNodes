/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode deepestNode;
    public TreeNode subtreeWithAllDeepest(TreeNode root) {
        deepestNode = root;
        int [] maxDepth = new int[1];
        maxDepth[0] = findHeight(root);
        dfs(root, 1, maxDepth);
        return deepestNode;
    }
    public void dfs(TreeNode node, int depth, int [] maxDepth) {
        if (node == null) {
            return;
        }
        if (maxDepth[0] - 1 == depth) {
            if (node.left != null && node.right != null) { 
                deepestNode = node;
            }
            else if (node.left != null || node.right != null) {
                deepestNode = node.left == null ? node.right : node.left;
            }
        }
        else {
            dfs(node.left, depth + 1, maxDepth);
            dfs(node.right, depth + 1, maxDepth);
        }
    }
    
    public int findHeight (TreeNode root) {
        if (root == null) {
            return 0;
        }
        return 1 + Math.max(findHeight(root.left), findHeight(root.right));
    }
}
