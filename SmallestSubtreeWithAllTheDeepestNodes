/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode deepestNode = null;
    public TreeNode subtreeWithAllDeepest(TreeNode root) {
        int [] maxHeight = new int [1];
        dfs(root, 1, maxHeight);
        return deepestNode;
    }
    public int dfs(TreeNode node, int height, int [] maxHeight) {
        if (node == null) {
            return height;
        }
        int leftHeight = dfs(node.left, height + 1, maxHeight);
        int rightHeight = dfs(node.right, height + 1, maxHeight);
        if (leftHeight == rightHeight && maxHeight[0] <= leftHeight) {
            maxHeight[0] = leftHeight;
            deepestNode = node;
        }
        return Math.max(leftHeight, rightHeight);
    }
}
